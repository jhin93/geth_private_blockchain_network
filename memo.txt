### 프라이빗 네트워크를 왜 빌드하는가?

1. 보안
많은 이들이 프라이빗한 정보를 공개된 퍼블릭 체인에 보관하는 것보다 안전한 곳에 보관하려고 한다. 기업들이 자체 메인넷을 구축하는 이유이다. 동시에 누가 네트워크에 접근하는지 알고자 한다. 또한 네트워크와 상호작용하는 이들을 통제하고자 한다.

2. 시간
비트코인은 블록당 10분, 이더리움은 12~13초가 걸린다. 기업, 개인마다 원하는 채굴시간은 다를 수 있다. 스스로 시간을 설정할 수 있는 점이 프라이빗 네트워크를 구축하는 이유이기도 하다.


<br>

### puppeth. Ethereum Private Network Manager
- geth
이더리움 노드들을 운영하기 위한 CLI. Go로 구현됨.
- puppeth
genesis 파일 생성. 네트워크의 모든 정보 담고 있음

구축과정.
1. 네트워크 이름 입력 blockpoa
2. Configure new genesis 선택
3. Create new genesis from scratch 선택
4. Clique - proof-of-authority. 프라이빗 네트워크에 작업증명은 어울리지 않음.
5. 블록 생성시간 5초 선택
6. node1 계정에 권한 부여 (93ce1d94e20b421f84e2253e877fb23ca9b6e7ff). 노드1에서 채굴
node2 계정은 네트워크의 일부지만 채굴은 안함
7. node1, node2에 가상이더 예치
8. yes
9. 체인/네트워크 이더리움은 1로 시작. 
10. 2번 'Manage existing genesis' 선택 // 여기서부턴 https://brunch.co.kr/@skkrypto/79 참고
11. Export genesis configuration 선택
12. 엔터 입력 - 현재 디렉토리에 export





<br>
<br>

### 명령어

- 이더리움 어카운트 생성
```
geth --datadir "./data" account new
```
결과 : 퍼블릭 어드레스 키 1개 + 시크릿 키 1개

- 제네시스 json 파일을 사용하는 노드 생성.
노드에게 누가 제네시스 json 파일을 사용하고 네트워크를 사용하는 지 알려줌.
(node1 진입 후, data폴더 확인하고 json파일 위치도 확인할 것)
```
geth --datadir ./data init ../blockpoa.json 
```

```
실행 결과 : 
➜  node1 git:(master) ✗ geth --datadir ./data init ../blockpoa.json
INFO [05-06|14:31:58.231] Maximum peer count                       ETH=50 LES=0 total=50
INFO [05-06|14:31:58.236] Set global gas cap                       cap=50,000,000
INFO [05-06|14:31:58.237] Allocated cache and file handles         database=/Users/kimjinkyung/Desktop/own_geth_network/node1/data/geth/chaindata cache=16.00MiB handles=16
INFO [05-06|14:31:58.385] Writing custom genesis block 
INFO [05-06|14:31:58.394] Persisted trie from memory database      nodes=356 size=50.62KiB time=2.599157ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
INFO [05-06|14:31:58.395] Successfully wrote genesis state         database=chaindata hash=54fb63..bd8862
INFO [05-06|14:31:58.395] Allocated cache and file handles         database=/Users/kimjinkyung/Desktop/own_geth_network/node1/data/geth/lightchaindata cache=16.00MiB handles=16
INFO [05-06|14:31:58.555] Writing custom genesis block 
INFO [05-06|14:31:58.567] Persisted trie from memory database      nodes=356 size=50.62KiB time=3.162662ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
INFO [05-06|14:31:58.567] Successfully wrote genesis state         database=lightchaindata hash=54fb63..bd8862
```

- 부트 노드에서 부트 키 생성
    bootnode -genkey boot.key

- 부트 키로 부트 노드 실행
    bootnode -nodekey boot.key

- 노드에서 부트노드를 통해 네트워크 실행

    node1 에서 네트워크 실행
    geth --networkid 14333 --datadir "./data" --bootnodes enode://8a0e55d9d2d6ca2ce64152dab6a93eed0dcb8e1be135c48d01c371728fce74d7988d4888d8af8c02a3a390627b2c18e4eae2c2a5359bf6ea3472133e337eb3bd@127.0.0.1:30301 --port 30303 --ipcdisable --syncmode full --rpc --allow-insecure-unlock --rpccorsdomain "*" --rpcport 8545 --unlock 0x93Ce1D94e20b421F84E2253E877Fb23cA9b6E7FF --password password.txt --mine console


    node2에서 네트워크 실행할 때 node1과 같은 형식 내에서 옵션을 다르게 해줘야 한다.

    포트는 30304,
    rpcport는 8546,
    모든 포트에서의 접근 허용(rpccorsdomain "*" )
    node2는 채굴자가 아니라고 처음 제네시스 파일 생성할때 설정함. 그래서 명령문에서 --mine옵션을 빼야함.
    퍼블릭 어드레스는 node2의 것을 입력

    geth --networkid 14333 --datadir "./data" 
    --bootnodes enode://8a0e55d9d2d6ca2ce64152dab6a93eed0dcb8e1be135c48d01c371728fce74d7988d4888d8af8c02a3a390627b2c18e4eae2c2a5359bf6ea3472133e337eb3bd@127.0.0.1:30301 
    --port 30304 
    --ipcdisable 
    --syncmode full 
    --rpc 
    --allow-insecure-unlock 
    --rpccorsdomain "*" 
    --rpcport 8546 
    --unlock 0xebed0F24eE1fA32b8e806224EbEA5971D628ECc1 
    --password password.txt 
    console






